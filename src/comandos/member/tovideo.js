const { WAConnection, MessageType, Mimetype } = require('@whiskeysockets/baileys');
const chalk = require('chalk');
const fs = require('fs');
const { PREFIX } = require("../../krampus"); // Aseg√∫rate de tener este PREFIX importado correctamente

// Almacena los subbots activos
const subbots = {};

// Funci√≥n para conectar un subbot
async function connectSubbot(subbotId, phoneNumber) {
  const subbot = new WAConnection();
  subbots[subbotId] = subbot; // Guardamos el subbot activo

  // Maneja la generaci√≥n del QR
  subbot.on('qr', (qr) => {
    console.log(chalk.yellow(`üì∏ Generando QR para el subbot ${subbotId}...`));
    sendQRToUser(qr, subbotId); // Env√≠a el QR al usuario
  });

  // Maneja el estado de la conexi√≥n
  subbot.on('connecting', () => {
    console.log(chalk.blue(`üîÑ Conectando el subbot ${subbotId}...`));
  });

  subbot.on('open', () => {
    console.log(chalk.green(`‚úÖ Conexi√≥n exitosa del subbot ${subbotId}!`));
  });

  // Maneja el cierre de la conexi√≥n
  subbot.on('close', (reason) => {
    console.log(chalk.red(`‚ùå La conexi√≥n del subbot ${subbotId} se cerr√≥. Raz√≥n: ${reason}`));
    reconnectSubbot(subbotId); // Reintenta la conexi√≥n si se cierra
  });

  try {
    await subbot.connect(); // Intentar la conexi√≥n
    console.log(chalk.green(`‚úÖ Subbot ${subbotId} conectado exitosamente!`));
  } catch (error) {
    console.log(chalk.red(`‚ùå Error al conectar el subbot ${subbotId}: ${error.message}`));
    reconnectSubbot(subbotId); // Reintentar en caso de fallo
  }
}

// Reintentar la conexi√≥n de un subbot si se cierra
async function reconnectSubbot(subbotId) {
  console.log(chalk.yellow(`üîÑ Reintentando conexi√≥n del subbot ${subbotId}...`));
  setTimeout(() => {
    connectSubbot(subbotId); // Reintenta la conexi√≥n
  }, 5000); // Reintento despu√©s de 5 segundos
}

// Funci√≥n para enviar QR al usuario
async function sendQRToUser(qr, subbotId) {
  // Aqu√≠ puedes implementar el c√≥digo para enviar el QR a los usuarios a trav√©s de WhatsApp
  console.log(chalk.blue(`QR generado para el subbot ${subbotId}: ${qr}`));
}

// Comando para iniciar el subbot
module.exports = {
  name: "startsubbot",
  description: "Inicia un subbot y env√≠a el QR.",
  commands: [`${PREFIX}startsubbot`],
  usage: `${PREFIX}startsubbot [n√∫mero de tel√©fono]`,
  handle: async ({ args, socket, remoteJid, sendReply }) => {
    // Verificar si se pas√≥ el n√∫mero de tel√©fono como argumento
    if (args.length < 1) {
      await sendReply("Uso incorrecto. Debes proporcionar el n√∫mero de tel√©fono del subbot.");
      return;
    }

    const phoneNumber = args[0]; // El n√∫mero de tel√©fono del subbot
    const subbotId = `subbot_${Date.now()}`; // Generamos un ID √∫nico para el subbot

    // Iniciar el subbot y enviar el mensaje
    await sendReply(`üîÑ Iniciando subbot para el n√∫mero: ${phoneNumber}`);
    await connectSubbot(subbotId, phoneNumber); // Conectamos el subbot con el n√∫mero de tel√©fono proporcionado
  },
};