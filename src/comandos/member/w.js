const { PREFIX } = require("../../krampus");
const { downloadMusic } = require("../../services/ytdpl");
const ytSearch = require("yt-search");
const fs = require("fs");

module.exports = {
  name: "musica",
  description: "Descargar y enviar m√∫sica desde YouTube",
  commands: ["musica", "m"],
  usage: `${PREFIX}musica <nombre del video>`,
  handle: async ({
    socket,
    remoteJid,
    sendReply,
    args,
    sendWaitReact,
    sendMusicReact,
    webMessage,
  }) => {
    try {
      const videoQuery = args.join(" ");
      if (!videoQuery) {
        await sendReply(
          "‚ùå Por favor, proporciona el nombre del video que deseas buscar."
        );
        return;
      }

      // Reacci√≥n inicial mientras buscamos y descargamos
      await sendWaitReact("‚è≥");

      // Realizamos la b√∫squeda en YouTube
      const searchResult = await ytSearch(videoQuery);
      const video = searchResult.videos[0];
      if (!video) {
        await sendReply(
          "‚ùå No se encontr√≥ ning√∫n video con ese nombre.",
          { quoted: webMessage } // Responde al mensaje del usuario
        );
        return;
      }

      const videoUrl = video.url;
      const videoTitle = video.title;
      const videoDuration = video.timestamp.split(":").slice(-2).join(":"); // Minutos y segundos

      console.log(`Video encontrado: ${videoTitle}, URL: ${videoUrl}`);

      // Formateamos el mensaje con la duraci√≥n y el t√≠tulo
      const message = `1:10‚îÅ‚îÅ‚îÅ‚îÅ‚óè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ${videoDuration}
\n${videoTitle}
> Bot by Krampus OM
O·¥ò·¥á Ä·¥Ä·¥Ñ…™·¥è…¥ M·¥Ä Äs ú·¥Ä ü ü ‡º¥‡ºéùôæùôº‡ºé`;

      // Enviamos el mensaje con el nuevo texto
      await sendReply(message, { quoted: webMessage });

      // Llamamos a la funci√≥n downloadMusic para descargar la m√∫sica
      const musicPath = await downloadMusic(videoUrl);
      console.log(`M√∫sica descargada correctamente: ${musicPath}`);

      // Reacci√≥n para indicar que la m√∫sica est√° lista
      await sendMusicReact("üéµ");

      // Enviar la m√∫sica como archivo, respondiendo al mensaje del usuario
      await socket.sendMessage(remoteJid, {
        audio: { url: musicPath },
        mimetype: "audio/mp4",
        caption: `üé∂ Aqu√≠ tienes la m√∫sica: ${videoTitle}`,
        quoted: webMessage, // Responder al mensaje original del usuario
        ptt: false, // No es un mensaje de voz
      });

      // Eliminar el archivo despu√©s de enviarlo
      setTimeout(() => {
        fs.unlink(musicPath, (err) => {
          if (err) {
            console.error(`Error al eliminar el archivo de m√∫sica: ${err}`);
          } else {
            console.log(`Archivo de m√∫sica eliminado: ${musicPath}`);
          }
        });
      }, 1 * 60 * 1000); // Eliminar despu√©s de 1 minuto
    } catch (error) {
      console.error("Error al descargar o enviar la m√∫sica:", error);
      await sendReply(
        "‚ùå Hubo un error al procesar la m√∫sica.",
        { quoted: webMessage } // Responder al mensaje original del usuario
      );
    }
  },
};